// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ToggleOption /> should render and match the snapshot 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <ToggleOption
    iconImg="./image.png"
    message={
        Object {
            "defaultMessage": "someContent",
            "id": "boilerplate.containers.LocaleToggle.en",
          }
    }
    onChange={[Function]}
    value="en"
/>,
  "nodes": Array [
    <ToggleOption
      iconImg="./image.png"
      message={
            Object {
                  "defaultMessage": "someContent",
                  "id": "boilerplate.containers.LocaleToggle.en",
                }
      }
      onChange={[Function]}
      value="en"
/>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <IntlProvider
        locale="en"
>
        <ToggleOption
                iconImg="./image.png"
                message={
                        Object {
                                "defaultMessage": "someContent",
                                "id": "boilerplate.containers.LocaleToggle.en",
                              }
                }
                onChange={[Function]}
                value="en"
        />
</IntlProvider>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": IntlProvider {
        "_reactInternalInstance": [Circular],
        "context": Object {
          "intl": undefined,
        },
        "props": Object {
          "children": <ToggleOption
            iconImg="./image.png"
            message={
                        Object {
                                    "defaultMessage": "someContent",
                                    "id": "boilerplate.containers.LocaleToggle.en",
                                  }
            }
            onChange={[Function]}
            value="en"
/>,
          "locale": "en",
        },
        "refs": Object {},
        "state": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
          "now": [Function],
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <ToggleOption
          iconImg="./image.png"
          message={
                    Object {
                              "defaultMessage": "someContent",
                              "id": "boilerplate.containers.LocaleToggle.en",
                            }
          }
          onChange={[Function]}
          value="en"
/>,
        "_debugID": 2,
        "_renderedOutput": <ToggleOption
          iconImg="./image.png"
          message={
                    Object {
                              "defaultMessage": "someContent",
                              "id": "boilerplate.containers.LocaleToggle.en",
                            }
          }
          onChange={[Function]}
          value="en"
/>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <IntlProvider
    locale="en"
>
    <ToggleOption
        iconImg="./image.png"
        message={
            Object {
                "defaultMessage": "someContent",
                "id": "boilerplate.containers.LocaleToggle.en",
              }
        }
        onChange={[Function]}
        value="en"
    />
</IntlProvider>,
}
`;
