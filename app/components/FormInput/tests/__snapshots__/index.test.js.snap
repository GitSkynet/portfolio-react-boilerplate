// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FormInput and then moves away from the field should show a message that the input is correct 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <InputGroup__InputGroup>
    <Label__Label
        htmlFor="name"
        onClick={[Function]}
    >
        <LabelContent__LabelContent
            hasFocus={true}
        >
            This is the label text
            <Placeholder__Placeholder
                hasFocus={true}
            >
                <i>
                    This is the placeholder text
                </i>
            </Placeholder__Placeholder>
        </LabelContent__LabelContent>
    </Label__Label>
    <Input__Input
        innerRef={[Function]}
        name="This is the input its name"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        type="dummy"
        value="This is valid"
    />
    <div>
        <ErrorMessage__ErrorMessage
            showError={false}
        >
            undefined 
        </ErrorMessage__ErrorMessage>
        <HelperText__HelperText>
            <FormattedMessage
                defaultMessage="Thanks!"
                id="portfolio.components.FormInput.helperText.valid"
                values={Object {}}
            />
        </HelperText__HelperText>
    </div>
</InputGroup__InputGroup>,
  "nodes": Array [
    <InputGroup__InputGroup>
      <Label__Label
            htmlFor="name"
            onClick={[Function]}
      >
            <LabelContent__LabelContent
                  hasFocus={true}
            >
                  This is the label text
                  <Placeholder__Placeholder
                        hasFocus={true}
                  >
                        <i>
                              This is the placeholder text
                        </i>
                  </Placeholder__Placeholder>
            </LabelContent__LabelContent>
      </Label__Label>
      <Input__Input
            innerRef={[Function]}
            name="This is the input its name"
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            type="dummy"
            value="This is valid"
      />
      <div>
            <ErrorMessage__ErrorMessage
                  showError={false}
            >
                  undefined 
            </ErrorMessage__ErrorMessage>
            <HelperText__HelperText>
                  <FormattedMessage
                        defaultMessage="Thanks!"
                        id="portfolio.components.FormInput.helperText.valid"
                        values={Object {}}
                  />
            </HelperText__HelperText>
      </div>
</InputGroup__InputGroup>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <FormInput
        helperText="This is a helper text"
        inputType="dummy"
        isTextArea={false}
        label="This is the label text"
        maxLength={15}
        minLength={1}
        name="This is the input its name"
        onChange={[Function]}
        placeholder="This is the placeholder text"
        validate={[Function]}
        value="The value"
/>,
      "_debugID": 17,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": FormInput {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "onBlur": [Function],
        "onChange": [Function],
        "onFocus": [Function],
        "props": Object {
          "helperText": "This is a helper text",
          "inputType": "dummy",
          "isTextArea": false,
          "label": "This is the label text",
          "maxLength": 15,
          "minLength": 1,
          "name": "This is the input its name",
          "onChange": [Function],
          "placeholder": "This is the placeholder text",
          "validate": [Function],
          "value": "The value",
        },
        "refs": Object {},
        "setFocus": [Function],
        "state": Object {
          "_hasFocus": false,
          "_height": "",
          "error": undefined,
          "value": "This is valid",
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 9,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <InputGroup__InputGroup>
          <Label__Label
                    htmlFor="name"
                    onClick={[Function]}
          >
                    <LabelContent__LabelContent
                              hasFocus={true}
                    >
                              This is the label text
                              <Placeholder__Placeholder
                                        hasFocus={true}
                              >
                                        <i>
                                                  This is the placeholder text
                                        </i>
                              </Placeholder__Placeholder>
                    </LabelContent__LabelContent>
          </Label__Label>
          <Input__Input
                    innerRef={[Function]}
                    name="This is the input its name"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    type="dummy"
                    value="This is valid"
          />
          <div>
                    <ErrorMessage__ErrorMessage
                              showError={false}
                    >
                              undefined 
                    </ErrorMessage__ErrorMessage>
                    <HelperText__HelperText>
                              <FormattedMessage
                                        defaultMessage="Thanks!"
                                        id="portfolio.components.FormInput.helperText.valid"
                                        values={Object {}}
                              />
                    </HelperText__HelperText>
          </div>
</InputGroup__InputGroup>,
        "_debugID": 18,
        "_renderedOutput": <InputGroup__InputGroup>
          <Label__Label
                    htmlFor="name"
                    onClick={[Function]}
          >
                    <LabelContent__LabelContent
                              hasFocus={true}
                    >
                              This is the label text
                              <Placeholder__Placeholder
                                        hasFocus={true}
                              >
                                        <i>
                                                  This is the placeholder text
                                        </i>
                              </Placeholder__Placeholder>
                    </LabelContent__LabelContent>
          </Label__Label>
          <Input__Input
                    innerRef={[Function]}
                    name="This is the input its name"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    type="dummy"
                    value="This is valid"
          />
          <div>
                    <ErrorMessage__ErrorMessage
                              showError={false}
                    >
                              undefined 
                    </ErrorMessage__ErrorMessage>
                    <HelperText__HelperText>
                              <FormattedMessage
                                        defaultMessage="Thanks!"
                                        id="portfolio.components.FormInput.helperText.valid"
                                        values={Object {}}
                              />
                    </HelperText__HelperText>
          </div>
</InputGroup__InputGroup>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <FormInput
    helperText="This is a helper text"
    inputType="dummy"
    isTextArea={false}
    label="This is the label text"
    maxLength={15}
    minLength={1}
    name="This is the input its name"
    onChange={[Function]}
    placeholder="This is the placeholder text"
    validate={[Function]}
    value="The value"
/>,
}
`;

exports[`FormInput and then moves away from the field should show an error message when the input is not correct 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <InputGroup__InputGroup>
    <Label__Label
        htmlFor="name"
        onClick={[Function]}
    >
        <LabelContent__LabelContent
            hasFocus={false}
        >
            This is the label text
            <Placeholder__Placeholder
                hasFocus={false}
            >
                <i>
                    This is the placeholder text
                </i>
            </Placeholder__Placeholder>
        </LabelContent__LabelContent>
    </Label__Label>
    <Input__Input
        innerRef={[Function]}
        name="This is the input its name"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        type="dummy"
        value=""
    />
    <div>
        <ErrorMessage__ErrorMessage
            showError={true}
        >
            Error, Error, Error 
        </ErrorMessage__ErrorMessage>
        <HelperText__HelperText>
            <span>
                This is a helper text
                 
                <FormattedMessage
                    defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                    id="portfolio.components.FormInput.helperText.range"
                    values={
                        Object {
                            "count": 0,
                            "maxLength": 15,
                            "minLength": 1,
                          }
                    }
                />
            </span>
        </HelperText__HelperText>
    </div>
</InputGroup__InputGroup>,
  "nodes": Array [
    <InputGroup__InputGroup>
      <Label__Label
            htmlFor="name"
            onClick={[Function]}
      >
            <LabelContent__LabelContent
                  hasFocus={false}
            >
                  This is the label text
                  <Placeholder__Placeholder
                        hasFocus={false}
                  >
                        <i>
                              This is the placeholder text
                        </i>
                  </Placeholder__Placeholder>
            </LabelContent__LabelContent>
      </Label__Label>
      <Input__Input
            innerRef={[Function]}
            name="This is the input its name"
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            type="dummy"
            value=""
      />
      <div>
            <ErrorMessage__ErrorMessage
                  showError={true}
            >
                  Error, Error, Error 
            </ErrorMessage__ErrorMessage>
            <HelperText__HelperText>
                  <span>
                        This is a helper text
                         
                        <FormattedMessage
                              defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                              id="portfolio.components.FormInput.helperText.range"
                              values={
                                    Object {
                                          "count": 0,
                                          "maxLength": 15,
                                          "minLength": 1,
                                        }
                              }
                        />
                  </span>
            </HelperText__HelperText>
      </div>
</InputGroup__InputGroup>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <FormInput
        helperText="This is a helper text"
        inputType="dummy"
        isTextArea={false}
        label="This is the label text"
        maxLength={15}
        minLength={1}
        name="This is the input its name"
        onChange={[Function]}
        placeholder="This is the placeholder text"
        validate={[Function]}
        value="The value"
/>,
      "_debugID": 19,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": FormInput {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "onBlur": [Function],
        "onChange": [Function],
        "onFocus": [Function],
        "props": Object {
          "helperText": "This is a helper text",
          "inputType": "dummy",
          "isTextArea": false,
          "label": "This is the label text",
          "maxLength": 15,
          "minLength": 1,
          "name": "This is the input its name",
          "onChange": [Function],
          "placeholder": "This is the placeholder text",
          "validate": [Function],
          "value": "The value",
        },
        "refs": Object {},
        "setFocus": [Function],
        "state": Object {
          "_hasFocus": false,
          "_height": "",
          "error": "Error, Error, Error",
          "value": "",
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 10,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <InputGroup__InputGroup>
          <Label__Label
                    htmlFor="name"
                    onClick={[Function]}
          >
                    <LabelContent__LabelContent
                              hasFocus={false}
                    >
                              This is the label text
                              <Placeholder__Placeholder
                                        hasFocus={false}
                              >
                                        <i>
                                                  This is the placeholder text
                                        </i>
                              </Placeholder__Placeholder>
                    </LabelContent__LabelContent>
          </Label__Label>
          <Input__Input
                    innerRef={[Function]}
                    name="This is the input its name"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    type="dummy"
                    value=""
          />
          <div>
                    <ErrorMessage__ErrorMessage
                              showError={true}
                    >
                              Error, Error, Error 
                    </ErrorMessage__ErrorMessage>
                    <HelperText__HelperText>
                              <span>
                                        This is a helper text
                                         
                                        <FormattedMessage
                                                  defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                                                  id="portfolio.components.FormInput.helperText.range"
                                                  values={
                                                            Object {
                                                                      "count": 0,
                                                                      "maxLength": 15,
                                                                      "minLength": 1,
                                                                    }
                                                  }
                                        />
                              </span>
                    </HelperText__HelperText>
          </div>
</InputGroup__InputGroup>,
        "_debugID": 20,
        "_renderedOutput": <InputGroup__InputGroup>
          <Label__Label
                    htmlFor="name"
                    onClick={[Function]}
          >
                    <LabelContent__LabelContent
                              hasFocus={false}
                    >
                              This is the label text
                              <Placeholder__Placeholder
                                        hasFocus={false}
                              >
                                        <i>
                                                  This is the placeholder text
                                        </i>
                              </Placeholder__Placeholder>
                    </LabelContent__LabelContent>
          </Label__Label>
          <Input__Input
                    innerRef={[Function]}
                    name="This is the input its name"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    type="dummy"
                    value=""
          />
          <div>
                    <ErrorMessage__ErrorMessage
                              showError={true}
                    >
                              Error, Error, Error 
                    </ErrorMessage__ErrorMessage>
                    <HelperText__HelperText>
                              <span>
                                        This is a helper text
                                         
                                        <FormattedMessage
                                                  defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                                                  id="portfolio.components.FormInput.helperText.range"
                                                  values={
                                                            Object {
                                                                      "count": 0,
                                                                      "maxLength": 15,
                                                                      "minLength": 1,
                                                                    }
                                                  }
                                        />
                              </span>
                    </HelperText__HelperText>
          </div>
</InputGroup__InputGroup>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <FormInput
    helperText="This is a helper text"
    inputType="dummy"
    isTextArea={false}
    label="This is the label text"
    maxLength={15}
    minLength={1}
    name="This is the input its name"
    onChange={[Function]}
    placeholder="This is the placeholder text"
    validate={[Function]}
    value="The value"
/>,
}
`;

exports[`FormInput should receive props 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <InputGroup__InputGroup>
    <Label__Label
        htmlFor="name"
        onClick={[Function]}
    >
        <LabelContent__LabelContent
            hasFocus={true}
        >
            This is the label text
            <Placeholder__Placeholder
                hasFocus={true}
            >
                <i>
                    This is the placeholder text
                </i>
            </Placeholder__Placeholder>
        </LabelContent__LabelContent>
    </Label__Label>
    <styled.textarea
        innerRef={[Function]}
        name="This is the input its name"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        style={
            Object {
                "height": "",
              }
        }
        value="The value"
    />
    <div>
        <ErrorMessage__ErrorMessage
            showError={false}
        >
            false 
        </ErrorMessage__ErrorMessage>
        <HelperText__HelperText>
            <FormattedMessage
                defaultMessage="Thanks!"
                id="portfolio.components.FormInput.helperText.valid"
                values={Object {}}
            />
        </HelperText__HelperText>
    </div>
</InputGroup__InputGroup>,
  "nodes": Array [
    <InputGroup__InputGroup>
      <Label__Label
            htmlFor="name"
            onClick={[Function]}
      >
            <LabelContent__LabelContent
                  hasFocus={true}
            >
                  This is the label text
                  <Placeholder__Placeholder
                        hasFocus={true}
                  >
                        <i>
                              This is the placeholder text
                        </i>
                  </Placeholder__Placeholder>
            </LabelContent__LabelContent>
      </Label__Label>
      <styled.textarea
            innerRef={[Function]}
            name="This is the input its name"
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            style={
                  Object {
                        "height": "",
                      }
            }
            value="The value"
      />
      <div>
            <ErrorMessage__ErrorMessage
                  showError={false}
            >
                  false 
            </ErrorMessage__ErrorMessage>
            <HelperText__HelperText>
                  <FormattedMessage
                        defaultMessage="Thanks!"
                        id="portfolio.components.FormInput.helperText.valid"
                        values={Object {}}
                  />
            </HelperText__HelperText>
      </div>
</InputGroup__InputGroup>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <FormInput
        helperText="This is a helper text"
        inputType="dummy"
        isTextArea={true}
        label="This is the label text"
        maxLength={15}
        minLength={1}
        name="This is the input its name"
        onChange={[Function]}
        placeholder="This is the placeholder text"
        validate={[Function]}
        value="The value"
/>,
      "_debugID": 5,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": FormInput {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "onBlur": [Function],
        "onChange": [Function],
        "onFocus": [Function],
        "props": Object {
          "helperText": "This is a helper text",
          "inputType": "dummy",
          "isTextArea": true,
          "label": "This is the label text",
          "maxLength": 15,
          "minLength": 1,
          "name": "This is the input its name",
          "onChange": [Function],
          "placeholder": "This is the placeholder text",
          "validate": [Function],
          "value": "The value",
        },
        "refs": Object {},
        "setFocus": [Function],
        "state": Object {
          "_hasFocus": false,
          "_height": "",
          "error": false,
          "value": "The value",
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 3,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <InputGroup__InputGroup>
          <Label__Label
                    htmlFor="name"
                    onClick={[Function]}
          >
                    <LabelContent__LabelContent
                              hasFocus={true}
                    >
                              This is the label text
                              <Placeholder__Placeholder
                                        hasFocus={true}
                              >
                                        <i>
                                                  This is the placeholder text
                                        </i>
                              </Placeholder__Placeholder>
                    </LabelContent__LabelContent>
          </Label__Label>
          <styled.textarea
                    innerRef={[Function]}
                    name="This is the input its name"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    style={
                              Object {
                                        "height": "",
                                      }
                    }
                    value="The value"
          />
          <div>
                    <ErrorMessage__ErrorMessage
                              showError={false}
                    >
                              false 
                    </ErrorMessage__ErrorMessage>
                    <HelperText__HelperText>
                              <FormattedMessage
                                        defaultMessage="Thanks!"
                                        id="portfolio.components.FormInput.helperText.valid"
                                        values={Object {}}
                              />
                    </HelperText__HelperText>
          </div>
</InputGroup__InputGroup>,
        "_debugID": 6,
        "_renderedOutput": <InputGroup__InputGroup>
          <Label__Label
                    htmlFor="name"
                    onClick={[Function]}
          >
                    <LabelContent__LabelContent
                              hasFocus={true}
                    >
                              This is the label text
                              <Placeholder__Placeholder
                                        hasFocus={true}
                              >
                                        <i>
                                                  This is the placeholder text
                                        </i>
                              </Placeholder__Placeholder>
                    </LabelContent__LabelContent>
          </Label__Label>
          <styled.textarea
                    innerRef={[Function]}
                    name="This is the input its name"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    style={
                              Object {
                                        "height": "",
                                      }
                    }
                    value="The value"
          />
          <div>
                    <ErrorMessage__ErrorMessage
                              showError={false}
                    >
                              false 
                    </ErrorMessage__ErrorMessage>
                    <HelperText__HelperText>
                              <FormattedMessage
                                        defaultMessage="Thanks!"
                                        id="portfolio.components.FormInput.helperText.valid"
                                        values={Object {}}
                              />
                    </HelperText__HelperText>
          </div>
</InputGroup__InputGroup>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <FormInput
    helperText="This is a helper text"
    inputType="dummy"
    isTextArea={true}
    label="This is the label text"
    maxLength={15}
    minLength={1}
    name="This is the input its name"
    onChange={[Function]}
    placeholder="This is the placeholder text"
    validate={[Function]}
    value="The value"
/>,
}
`;

exports[`FormInput should render and match the snapshot 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <InputGroup__InputGroup>
    <Label__Label
        htmlFor="name"
        onClick={[Function]}
    >
        <LabelContent__LabelContent
            hasFocus={false}
        >
            This is the label text
            <Placeholder__Placeholder
                hasFocus={false}
            >
                <i />
            </Placeholder__Placeholder>
        </LabelContent__LabelContent>
    </Label__Label>
    <Input__Input
        innerRef={[Function]}
        name="This is the input its name"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        type="text"
        value={undefined}
    />
    <div>
        <ErrorMessage__ErrorMessage
            showError={false}
        >
            false 
        </ErrorMessage__ErrorMessage>
        <HelperText__HelperText />
    </div>
</InputGroup__InputGroup>,
  "nodes": Array [
    <InputGroup__InputGroup>
      <Label__Label
            htmlFor="name"
            onClick={[Function]}
      >
            <LabelContent__LabelContent
                  hasFocus={false}
            >
                  This is the label text
                  <Placeholder__Placeholder
                        hasFocus={false}
                  >
                        <i />
                  </Placeholder__Placeholder>
            </LabelContent__LabelContent>
      </Label__Label>
      <Input__Input
            innerRef={[Function]}
            name="This is the input its name"
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            type="text"
            value={undefined}
      />
      <div>
            <ErrorMessage__ErrorMessage
                  showError={false}
            >
                  false 
            </ErrorMessage__ErrorMessage>
            <HelperText__HelperText />
      </div>
</InputGroup__InputGroup>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <FormInput
        inputType="text"
        isTextArea={false}
        label="This is the label text"
        name="This is the input its name"
        onChange={[Function]}
/>,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": FormInput {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "onBlur": [Function],
        "onChange": [Function],
        "onFocus": [Function],
        "props": Object {
          "inputType": "text",
          "isTextArea": false,
          "label": "This is the label text",
          "name": "This is the input its name",
          "onChange": [Function],
        },
        "refs": Object {},
        "setFocus": [Function],
        "state": Object {
          "_hasFocus": false,
          "_height": "",
          "error": false,
          "value": undefined,
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <InputGroup__InputGroup>
          <Label__Label
                    htmlFor="name"
                    onClick={[Function]}
          >
                    <LabelContent__LabelContent
                              hasFocus={false}
                    >
                              This is the label text
                              <Placeholder__Placeholder
                                        hasFocus={false}
                              >
                                        <i />
                              </Placeholder__Placeholder>
                    </LabelContent__LabelContent>
          </Label__Label>
          <Input__Input
                    innerRef={[Function]}
                    name="This is the input its name"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    type="text"
                    value={undefined}
          />
          <div>
                    <ErrorMessage__ErrorMessage
                              showError={false}
                    >
                              false 
                    </ErrorMessage__ErrorMessage>
                    <HelperText__HelperText />
          </div>
</InputGroup__InputGroup>,
        "_debugID": 4,
        "_renderedOutput": <InputGroup__InputGroup>
          <Label__Label
                    htmlFor="name"
                    onClick={[Function]}
          >
                    <LabelContent__LabelContent
                              hasFocus={false}
                    >
                              This is the label text
                              <Placeholder__Placeholder
                                        hasFocus={false}
                              >
                                        <i />
                              </Placeholder__Placeholder>
                    </LabelContent__LabelContent>
          </Label__Label>
          <Input__Input
                    innerRef={[Function]}
                    name="This is the input its name"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    type="text"
                    value={undefined}
          />
          <div>
                    <ErrorMessage__ErrorMessage
                              showError={false}
                    >
                              false 
                    </ErrorMessage__ErrorMessage>
                    <HelperText__HelperText />
          </div>
</InputGroup__InputGroup>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <FormInput
    inputType="text"
    isTextArea={false}
    label="This is the label text"
    name="This is the input its name"
    onChange={[Function]}
/>,
}
`;

exports[`FormInput when a field has focus should act when a textarea is rendered 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <InputGroup__InputGroup>
    <Label__Label
        htmlFor="name"
        onClick={[Function]}
    >
        <LabelContent__LabelContent
            hasFocus={true}
        >
            This is the label text
            <Placeholder__Placeholder
                hasFocus={true}
            >
                <i>
                    This is the placeholder text
                </i>
            </Placeholder__Placeholder>
        </LabelContent__LabelContent>
    </Label__Label>
    <styled.textarea
        innerRef={[Function]}
        name="This is the input its name"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        style={
            Object {
                "height": "",
              }
        }
        value="The value"
    />
    <div>
        <ErrorMessage__ErrorMessage
            showError={false}
        >
            false 
        </ErrorMessage__ErrorMessage>
        <HelperText__HelperText>
            <span>
                This is a helper text
                 
                <FormattedMessage
                    defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                    id="portfolio.components.FormInput.helperText.range"
                    values={
                        Object {
                            "count": 9,
                            "maxLength": 15,
                            "minLength": 1,
                          }
                    }
                />
            </span>
        </HelperText__HelperText>
    </div>
</InputGroup__InputGroup>,
  "nodes": Array [
    <InputGroup__InputGroup>
      <Label__Label
            htmlFor="name"
            onClick={[Function]}
      >
            <LabelContent__LabelContent
                  hasFocus={true}
            >
                  This is the label text
                  <Placeholder__Placeholder
                        hasFocus={true}
                  >
                        <i>
                              This is the placeholder text
                        </i>
                  </Placeholder__Placeholder>
            </LabelContent__LabelContent>
      </Label__Label>
      <styled.textarea
            innerRef={[Function]}
            name="This is the input its name"
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            style={
                  Object {
                        "height": "",
                      }
            }
            value="The value"
      />
      <div>
            <ErrorMessage__ErrorMessage
                  showError={false}
            >
                  false 
            </ErrorMessage__ErrorMessage>
            <HelperText__HelperText>
                  <span>
                        This is a helper text
                         
                        <FormattedMessage
                              defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                              id="portfolio.components.FormInput.helperText.range"
                              values={
                                    Object {
                                          "count": 9,
                                          "maxLength": 15,
                                          "minLength": 1,
                                        }
                              }
                        />
                  </span>
            </HelperText__HelperText>
      </div>
</InputGroup__InputGroup>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <FormInput
        helperText="This is a helper text"
        inputType="dummy"
        isTextArea={true}
        label="This is the label text"
        maxLength={15}
        minLength={1}
        name="This is the input its name"
        onChange={[Function]}
        placeholder="This is the placeholder text"
        validate={[Function]}
        value="The value"
/>,
      "_debugID": 11,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": FormInput {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "onBlur": [Function],
        "onChange": [Function],
        "onFocus": [Function],
        "props": Object {
          "helperText": "This is a helper text",
          "inputType": "dummy",
          "isTextArea": true,
          "label": "This is the label text",
          "maxLength": 15,
          "minLength": 1,
          "name": "This is the input its name",
          "onChange": [Function],
          "placeholder": "This is the placeholder text",
          "validate": [Function],
          "value": "The value",
        },
        "refs": Object {},
        "setFocus": [Function],
        "state": Object {
          "_hasFocus": true,
          "_height": "",
          "error": false,
          "value": "The value",
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 6,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <InputGroup__InputGroup>
          <Label__Label
                    htmlFor="name"
                    onClick={[Function]}
          >
                    <LabelContent__LabelContent
                              hasFocus={true}
                    >
                              This is the label text
                              <Placeholder__Placeholder
                                        hasFocus={true}
                              >
                                        <i>
                                                  This is the placeholder text
                                        </i>
                              </Placeholder__Placeholder>
                    </LabelContent__LabelContent>
          </Label__Label>
          <styled.textarea
                    innerRef={[Function]}
                    name="This is the input its name"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    style={
                              Object {
                                        "height": "",
                                      }
                    }
                    value="The value"
          />
          <div>
                    <ErrorMessage__ErrorMessage
                              showError={false}
                    >
                              false 
                    </ErrorMessage__ErrorMessage>
                    <HelperText__HelperText>
                              <span>
                                        This is a helper text
                                         
                                        <FormattedMessage
                                                  defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                                                  id="portfolio.components.FormInput.helperText.range"
                                                  values={
                                                            Object {
                                                                      "count": 9,
                                                                      "maxLength": 15,
                                                                      "minLength": 1,
                                                                    }
                                                  }
                                        />
                              </span>
                    </HelperText__HelperText>
          </div>
</InputGroup__InputGroup>,
        "_debugID": 12,
        "_renderedOutput": <InputGroup__InputGroup>
          <Label__Label
                    htmlFor="name"
                    onClick={[Function]}
          >
                    <LabelContent__LabelContent
                              hasFocus={true}
                    >
                              This is the label text
                              <Placeholder__Placeholder
                                        hasFocus={true}
                              >
                                        <i>
                                                  This is the placeholder text
                                        </i>
                              </Placeholder__Placeholder>
                    </LabelContent__LabelContent>
          </Label__Label>
          <styled.textarea
                    innerRef={[Function]}
                    name="This is the input its name"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    style={
                              Object {
                                        "height": "",
                                      }
                    }
                    value="The value"
          />
          <div>
                    <ErrorMessage__ErrorMessage
                              showError={false}
                    >
                              false 
                    </ErrorMessage__ErrorMessage>
                    <HelperText__HelperText>
                              <span>
                                        This is a helper text
                                         
                                        <FormattedMessage
                                                  defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                                                  id="portfolio.components.FormInput.helperText.range"
                                                  values={
                                                            Object {
                                                                      "count": 9,
                                                                      "maxLength": 15,
                                                                      "minLength": 1,
                                                                    }
                                                  }
                                        />
                              </span>
                    </HelperText__HelperText>
          </div>
</InputGroup__InputGroup>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <FormInput
    helperText="This is a helper text"
    inputType="dummy"
    isTextArea={true}
    label="This is the label text"
    maxLength={15}
    minLength={1}
    name="This is the input its name"
    onChange={[Function]}
    placeholder="This is the placeholder text"
    validate={[Function]}
    value="The value"
/>,
}
`;

exports[`FormInput when a field has focus should act when an input field is rendered 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <InputGroup__InputGroup>
    <Label__Label
        htmlFor="name"
        onClick={[Function]}
    >
        <LabelContent__LabelContent
            hasFocus={true}
        >
            This is the label text
            <Placeholder__Placeholder
                hasFocus={true}
            >
                <i>
                    This is the placeholder text
                </i>
            </Placeholder__Placeholder>
        </LabelContent__LabelContent>
    </Label__Label>
    <Input__Input
        innerRef={[Function]}
        name="This is the input its name"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        type="dummy"
        value="The value"
    />
    <div>
        <ErrorMessage__ErrorMessage
            showError={false}
        >
            false 
        </ErrorMessage__ErrorMessage>
        <HelperText__HelperText>
            <span>
                This is a helper text
                 
                <FormattedMessage
                    defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                    id="portfolio.components.FormInput.helperText.range"
                    values={
                        Object {
                            "count": 9,
                            "maxLength": 15,
                            "minLength": 1,
                          }
                    }
                />
            </span>
        </HelperText__HelperText>
    </div>
</InputGroup__InputGroup>,
  "nodes": Array [
    <InputGroup__InputGroup>
      <Label__Label
            htmlFor="name"
            onClick={[Function]}
      >
            <LabelContent__LabelContent
                  hasFocus={true}
            >
                  This is the label text
                  <Placeholder__Placeholder
                        hasFocus={true}
                  >
                        <i>
                              This is the placeholder text
                        </i>
                  </Placeholder__Placeholder>
            </LabelContent__LabelContent>
      </Label__Label>
      <Input__Input
            innerRef={[Function]}
            name="This is the input its name"
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            type="dummy"
            value="The value"
      />
      <div>
            <ErrorMessage__ErrorMessage
                  showError={false}
            >
                  false 
            </ErrorMessage__ErrorMessage>
            <HelperText__HelperText>
                  <span>
                        This is a helper text
                         
                        <FormattedMessage
                              defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                              id="portfolio.components.FormInput.helperText.range"
                              values={
                                    Object {
                                          "count": 9,
                                          "maxLength": 15,
                                          "minLength": 1,
                                        }
                              }
                        />
                  </span>
            </HelperText__HelperText>
      </div>
</InputGroup__InputGroup>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <FormInput
        helperText="This is a helper text"
        inputType="dummy"
        isTextArea={false}
        label="This is the label text"
        maxLength={15}
        minLength={1}
        name="This is the input its name"
        onChange={[Function]}
        placeholder="This is the placeholder text"
        validate={[Function]}
        value="The value"
/>,
      "_debugID": 9,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": FormInput {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "onBlur": [Function],
        "onChange": [Function],
        "onFocus": [Function],
        "props": Object {
          "helperText": "This is a helper text",
          "inputType": "dummy",
          "isTextArea": false,
          "label": "This is the label text",
          "maxLength": 15,
          "minLength": 1,
          "name": "This is the input its name",
          "onChange": [Function],
          "placeholder": "This is the placeholder text",
          "validate": [Function],
          "value": "The value",
        },
        "refs": Object {},
        "setFocus": [Function],
        "state": Object {
          "_hasFocus": true,
          "_height": "",
          "error": false,
          "value": "The value",
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 5,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <InputGroup__InputGroup>
          <Label__Label
                    htmlFor="name"
                    onClick={[Function]}
          >
                    <LabelContent__LabelContent
                              hasFocus={true}
                    >
                              This is the label text
                              <Placeholder__Placeholder
                                        hasFocus={true}
                              >
                                        <i>
                                                  This is the placeholder text
                                        </i>
                              </Placeholder__Placeholder>
                    </LabelContent__LabelContent>
          </Label__Label>
          <Input__Input
                    innerRef={[Function]}
                    name="This is the input its name"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    type="dummy"
                    value="The value"
          />
          <div>
                    <ErrorMessage__ErrorMessage
                              showError={false}
                    >
                              false 
                    </ErrorMessage__ErrorMessage>
                    <HelperText__HelperText>
                              <span>
                                        This is a helper text
                                         
                                        <FormattedMessage
                                                  defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                                                  id="portfolio.components.FormInput.helperText.range"
                                                  values={
                                                            Object {
                                                                      "count": 9,
                                                                      "maxLength": 15,
                                                                      "minLength": 1,
                                                                    }
                                                  }
                                        />
                              </span>
                    </HelperText__HelperText>
          </div>
</InputGroup__InputGroup>,
        "_debugID": 10,
        "_renderedOutput": <InputGroup__InputGroup>
          <Label__Label
                    htmlFor="name"
                    onClick={[Function]}
          >
                    <LabelContent__LabelContent
                              hasFocus={true}
                    >
                              This is the label text
                              <Placeholder__Placeholder
                                        hasFocus={true}
                              >
                                        <i>
                                                  This is the placeholder text
                                        </i>
                              </Placeholder__Placeholder>
                    </LabelContent__LabelContent>
          </Label__Label>
          <Input__Input
                    innerRef={[Function]}
                    name="This is the input its name"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    type="dummy"
                    value="The value"
          />
          <div>
                    <ErrorMessage__ErrorMessage
                              showError={false}
                    >
                              false 
                    </ErrorMessage__ErrorMessage>
                    <HelperText__HelperText>
                              <span>
                                        This is a helper text
                                         
                                        <FormattedMessage
                                                  defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                                                  id="portfolio.components.FormInput.helperText.range"
                                                  values={
                                                            Object {
                                                                      "count": 9,
                                                                      "maxLength": 15,
                                                                      "minLength": 1,
                                                                    }
                                                  }
                                        />
                              </span>
                    </HelperText__HelperText>
          </div>
</InputGroup__InputGroup>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <FormInput
    helperText="This is a helper text"
    inputType="dummy"
    isTextArea={false}
    label="This is the label text"
    maxLength={15}
    minLength={1}
    name="This is the input its name"
    onChange={[Function]}
    placeholder="This is the placeholder text"
    validate={[Function]}
    value="The value"
/>,
}
`;

exports[`FormInput when a user populates the input field should not show any errors as long as the field has the focus 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <InputGroup__InputGroup>
    <Label__Label
        htmlFor="name"
        onClick={[Function]}
    >
        <LabelContent__LabelContent
            hasFocus={true}
        >
            This is the label text
            <Placeholder__Placeholder
                hasFocus={true}
            >
                <i>
                    This is the placeholder text
                </i>
            </Placeholder__Placeholder>
        </LabelContent__LabelContent>
    </Label__Label>
    <Input__Input
        innerRef={[Function]}
        name="This is the input its name"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        type="dummy"
        value="testing123"
    />
    <div>
        <ErrorMessage__ErrorMessage
            showError={false}
        >
            Error message. 
        </ErrorMessage__ErrorMessage>
        <HelperText__HelperText>
            <span>
                This is a helper text
                 
                <FormattedMessage
                    defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                    id="portfolio.components.FormInput.helperText.range"
                    values={
                        Object {
                            "count": 10,
                            "maxLength": 15,
                            "minLength": 1,
                          }
                    }
                />
            </span>
        </HelperText__HelperText>
    </div>
</InputGroup__InputGroup>,
  "nodes": Array [
    <InputGroup__InputGroup>
      <Label__Label
            htmlFor="name"
            onClick={[Function]}
      >
            <LabelContent__LabelContent
                  hasFocus={true}
            >
                  This is the label text
                  <Placeholder__Placeholder
                        hasFocus={true}
                  >
                        <i>
                              This is the placeholder text
                        </i>
                  </Placeholder__Placeholder>
            </LabelContent__LabelContent>
      </Label__Label>
      <Input__Input
            innerRef={[Function]}
            name="This is the input its name"
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            type="dummy"
            value="testing123"
      />
      <div>
            <ErrorMessage__ErrorMessage
                  showError={false}
            >
                  Error message. 
            </ErrorMessage__ErrorMessage>
            <HelperText__HelperText>
                  <span>
                        This is a helper text
                         
                        <FormattedMessage
                              defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                              id="portfolio.components.FormInput.helperText.range"
                              values={
                                    Object {
                                          "count": 10,
                                          "maxLength": 15,
                                          "minLength": 1,
                                        }
                              }
                        />
                  </span>
            </HelperText__HelperText>
      </div>
</InputGroup__InputGroup>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <FormInput
        helperText="This is a helper text"
        inputType="dummy"
        isTextArea={false}
        label="This is the label text"
        maxLength={15}
        minLength={1}
        name="This is the input its name"
        onChange={[Function]}
        placeholder="This is the placeholder text"
        validate={[Function]}
        value="The value"
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": FormInput {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "onBlur": [Function],
        "onChange": [Function],
        "onFocus": [Function],
        "props": Object {
          "helperText": "This is a helper text",
          "inputType": "dummy",
          "isTextArea": false,
          "label": "This is the label text",
          "maxLength": 15,
          "minLength": 1,
          "name": "This is the input its name",
          "onChange": [Function],
          "placeholder": "This is the placeholder text",
          "validate": [Function],
          "value": "The value",
        },
        "refs": Object {},
        "setFocus": [Function],
        "state": Object {
          "_hasFocus": true,
          "_height": "",
          "error": "Error message.",
          "value": "testing123",
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <InputGroup__InputGroup>
          <Label__Label
                    htmlFor="name"
                    onClick={[Function]}
          >
                    <LabelContent__LabelContent
                              hasFocus={true}
                    >
                              This is the label text
                              <Placeholder__Placeholder
                                        hasFocus={true}
                              >
                                        <i>
                                                  This is the placeholder text
                                        </i>
                              </Placeholder__Placeholder>
                    </LabelContent__LabelContent>
          </Label__Label>
          <Input__Input
                    innerRef={[Function]}
                    name="This is the input its name"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    type="dummy"
                    value="testing123"
          />
          <div>
                    <ErrorMessage__ErrorMessage
                              showError={false}
                    >
                              Error message. 
                    </ErrorMessage__ErrorMessage>
                    <HelperText__HelperText>
                              <span>
                                        This is a helper text
                                         
                                        <FormattedMessage
                                                  defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                                                  id="portfolio.components.FormInput.helperText.range"
                                                  values={
                                                            Object {
                                                                      "count": 10,
                                                                      "maxLength": 15,
                                                                      "minLength": 1,
                                                                    }
                                                  }
                                        />
                              </span>
                    </HelperText__HelperText>
          </div>
</InputGroup__InputGroup>,
        "_debugID": 2,
        "_renderedOutput": <InputGroup__InputGroup>
          <Label__Label
                    htmlFor="name"
                    onClick={[Function]}
          >
                    <LabelContent__LabelContent
                              hasFocus={true}
                    >
                              This is the label text
                              <Placeholder__Placeholder
                                        hasFocus={true}
                              >
                                        <i>
                                                  This is the placeholder text
                                        </i>
                              </Placeholder__Placeholder>
                    </LabelContent__LabelContent>
          </Label__Label>
          <Input__Input
                    innerRef={[Function]}
                    name="This is the input its name"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    type="dummy"
                    value="testing123"
          />
          <div>
                    <ErrorMessage__ErrorMessage
                              showError={false}
                    >
                              Error message. 
                    </ErrorMessage__ErrorMessage>
                    <HelperText__HelperText>
                              <span>
                                        This is a helper text
                                         
                                        <FormattedMessage
                                                  defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                                                  id="portfolio.components.FormInput.helperText.range"
                                                  values={
                                                            Object {
                                                                      "count": 10,
                                                                      "maxLength": 15,
                                                                      "minLength": 1,
                                                                    }
                                                  }
                                        />
                              </span>
                    </HelperText__HelperText>
          </div>
</InputGroup__InputGroup>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <FormInput
    helperText="This is a helper text"
    inputType="dummy"
    isTextArea={false}
    label="This is the label text"
    maxLength={15}
    minLength={1}
    name="This is the input its name"
    onChange={[Function]}
    placeholder="This is the placeholder text"
    validate={[Function]}
    value="The value"
/>,
}
`;

exports[`FormInput when a user populates the input field should update the helper text, when available 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <InputGroup__InputGroup>
    <Label__Label
        htmlFor="name"
        onClick={[Function]}
    >
        <LabelContent__LabelContent
            hasFocus={true}
        >
            This is the label text
            <Placeholder__Placeholder
                hasFocus={true}
            >
                <i>
                    This is the placeholder text
                </i>
            </Placeholder__Placeholder>
        </LabelContent__LabelContent>
    </Label__Label>
    <Input__Input
        innerRef={[Function]}
        name="This is the input its name"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        type="dummy"
        value="testing123"
    />
    <div>
        <ErrorMessage__ErrorMessage
            showError={false}
        >
            false 
        </ErrorMessage__ErrorMessage>
        <HelperText__HelperText>
            <span>
                This is a helper text
                 
                <FormattedMessage
                    defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                    id="portfolio.components.FormInput.helperText.range"
                    values={
                        Object {
                            "count": 10,
                            "maxLength": 15,
                            "minLength": 1,
                          }
                    }
                />
            </span>
        </HelperText__HelperText>
    </div>
</InputGroup__InputGroup>,
  "nodes": Array [
    <InputGroup__InputGroup>
      <Label__Label
            htmlFor="name"
            onClick={[Function]}
      >
            <LabelContent__LabelContent
                  hasFocus={true}
            >
                  This is the label text
                  <Placeholder__Placeholder
                        hasFocus={true}
                  >
                        <i>
                              This is the placeholder text
                        </i>
                  </Placeholder__Placeholder>
            </LabelContent__LabelContent>
      </Label__Label>
      <Input__Input
            innerRef={[Function]}
            name="This is the input its name"
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            type="dummy"
            value="testing123"
      />
      <div>
            <ErrorMessage__ErrorMessage
                  showError={false}
            >
                  false 
            </ErrorMessage__ErrorMessage>
            <HelperText__HelperText>
                  <span>
                        This is a helper text
                         
                        <FormattedMessage
                              defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                              id="portfolio.components.FormInput.helperText.range"
                              values={
                                    Object {
                                          "count": 10,
                                          "maxLength": 15,
                                          "minLength": 1,
                                        }
                              }
                        />
                  </span>
            </HelperText__HelperText>
      </div>
</InputGroup__InputGroup>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <FormInput
        helperText="This is a helper text"
        inputType="dummy"
        isTextArea={false}
        label="This is the label text"
        maxLength={15}
        minLength={1}
        name="This is the input its name"
        onChange={[Function]}
        placeholder="This is the placeholder text"
        validate={[Function]}
        value="The value"
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": FormInput {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "onBlur": [Function],
        "onChange": [Function],
        "onFocus": [Function],
        "props": Object {
          "helperText": "This is a helper text",
          "inputType": "dummy",
          "isTextArea": false,
          "label": "This is the label text",
          "maxLength": 15,
          "minLength": 1,
          "name": "This is the input its name",
          "onChange": [Function],
          "placeholder": "This is the placeholder text",
          "validate": [Function],
          "value": "The value",
        },
        "refs": Object {},
        "setFocus": [Function],
        "state": Object {
          "_hasFocus": true,
          "_height": "",
          "error": false,
          "value": "testing123",
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <InputGroup__InputGroup>
          <Label__Label
                    htmlFor="name"
                    onClick={[Function]}
          >
                    <LabelContent__LabelContent
                              hasFocus={true}
                    >
                              This is the label text
                              <Placeholder__Placeholder
                                        hasFocus={true}
                              >
                                        <i>
                                                  This is the placeholder text
                                        </i>
                              </Placeholder__Placeholder>
                    </LabelContent__LabelContent>
          </Label__Label>
          <Input__Input
                    innerRef={[Function]}
                    name="This is the input its name"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    type="dummy"
                    value="testing123"
          />
          <div>
                    <ErrorMessage__ErrorMessage
                              showError={false}
                    >
                              false 
                    </ErrorMessage__ErrorMessage>
                    <HelperText__HelperText>
                              <span>
                                        This is a helper text
                                         
                                        <FormattedMessage
                                                  defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                                                  id="portfolio.components.FormInput.helperText.range"
                                                  values={
                                                            Object {
                                                                      "count": 10,
                                                                      "maxLength": 15,
                                                                      "minLength": 1,
                                                                    }
                                                  }
                                        />
                              </span>
                    </HelperText__HelperText>
          </div>
</InputGroup__InputGroup>,
        "_debugID": 2,
        "_renderedOutput": <InputGroup__InputGroup>
          <Label__Label
                    htmlFor="name"
                    onClick={[Function]}
          >
                    <LabelContent__LabelContent
                              hasFocus={true}
                    >
                              This is the label text
                              <Placeholder__Placeholder
                                        hasFocus={true}
                              >
                                        <i>
                                                  This is the placeholder text
                                        </i>
                              </Placeholder__Placeholder>
                    </LabelContent__LabelContent>
          </Label__Label>
          <Input__Input
                    innerRef={[Function]}
                    name="This is the input its name"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    type="dummy"
                    value="testing123"
          />
          <div>
                    <ErrorMessage__ErrorMessage
                              showError={false}
                    >
                              false 
                    </ErrorMessage__ErrorMessage>
                    <HelperText__HelperText>
                              <span>
                                        This is a helper text
                                         
                                        <FormattedMessage
                                                  defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                                                  id="portfolio.components.FormInput.helperText.range"
                                                  values={
                                                            Object {
                                                                      "count": 10,
                                                                      "maxLength": 15,
                                                                      "minLength": 1,
                                                                    }
                                                  }
                                        />
                              </span>
                    </HelperText__HelperText>
          </div>
</InputGroup__InputGroup>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <FormInput
    helperText="This is a helper text"
    inputType="dummy"
    isTextArea={false}
    label="This is the label text"
    maxLength={15}
    minLength={1}
    name="This is the input its name"
    onChange={[Function]}
    placeholder="This is the placeholder text"
    validate={[Function]}
    value="The value"
/>,
}
`;

exports[`FormInput when a user populates the textarea should not show any errors as long as the field has the focus 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <InputGroup__InputGroup>
    <Label__Label
        htmlFor="name"
        onClick={[Function]}
    >
        <LabelContent__LabelContent
            hasFocus={true}
        >
            This is the label text
            <Placeholder__Placeholder
                hasFocus={true}
            >
                <i>
                    This is the placeholder text
                </i>
            </Placeholder__Placeholder>
        </LabelContent__LabelContent>
    </Label__Label>
    <styled.textarea
        innerRef={[Function]}
        name="This is the input its name"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        style={
            Object {
                "height": "",
              }
        }
        value="testing123
    testing
    testing
    123"
    />
    <div>
        <ErrorMessage__ErrorMessage
            showError={false}
        >
            Error message. 
        </ErrorMessage__ErrorMessage>
        <HelperText__HelperText>
            <span>
                This is a helper text
                 
                <FormattedMessage
                    defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                    id="portfolio.components.FormInput.helperText.range"
                    values={
                        Object {
                            "count": 30,
                            "maxLength": 300,
                            "minLength": 1,
                          }
                    }
                />
            </span>
        </HelperText__HelperText>
    </div>
</InputGroup__InputGroup>,
  "nodes": Array [
    <InputGroup__InputGroup>
      <Label__Label
            htmlFor="name"
            onClick={[Function]}
      >
            <LabelContent__LabelContent
                  hasFocus={true}
            >
                  This is the label text
                  <Placeholder__Placeholder
                        hasFocus={true}
                  >
                        <i>
                              This is the placeholder text
                        </i>
                  </Placeholder__Placeholder>
            </LabelContent__LabelContent>
      </Label__Label>
      <styled.textarea
            innerRef={[Function]}
            name="This is the input its name"
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            style={
                  Object {
                        "height": "",
                      }
            }
            value="testing123
      testing
      testing
      123"
      />
      <div>
            <ErrorMessage__ErrorMessage
                  showError={false}
            >
                  Error message. 
            </ErrorMessage__ErrorMessage>
            <HelperText__HelperText>
                  <span>
                        This is a helper text
                         
                        <FormattedMessage
                              defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                              id="portfolio.components.FormInput.helperText.range"
                              values={
                                    Object {
                                          "count": 30,
                                          "maxLength": 300,
                                          "minLength": 1,
                                        }
                              }
                        />
                  </span>
            </HelperText__HelperText>
      </div>
</InputGroup__InputGroup>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <FormInput
        helperText="This is a helper text"
        inputType="dummy"
        isTextArea={true}
        label="This is the label text"
        maxLength={300}
        minLength={1}
        name="This is the input its name"
        onChange={[Function]}
        placeholder="This is the placeholder text"
        validate={[Function]}
        value="The value"
/>,
      "_debugID": 27,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": FormInput {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "onBlur": [Function],
        "onChange": [Function],
        "onFocus": [Function],
        "props": Object {
          "helperText": "This is a helper text",
          "inputType": "dummy",
          "isTextArea": true,
          "label": "This is the label text",
          "maxLength": 300,
          "minLength": 1,
          "name": "This is the input its name",
          "onChange": [Function],
          "placeholder": "This is the placeholder text",
          "validate": [Function],
          "value": "The value",
        },
        "refs": Object {},
        "setFocus": [Function],
        "state": Object {
          "_hasFocus": true,
          "_height": "",
          "error": "Error message.",
          "value": "testing123
testing
testing
123",
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 14,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <InputGroup__InputGroup>
          <Label__Label
                    htmlFor="name"
                    onClick={[Function]}
          >
                    <LabelContent__LabelContent
                              hasFocus={true}
                    >
                              This is the label text
                              <Placeholder__Placeholder
                                        hasFocus={true}
                              >
                                        <i>
                                                  This is the placeholder text
                                        </i>
                              </Placeholder__Placeholder>
                    </LabelContent__LabelContent>
          </Label__Label>
          <styled.textarea
                    innerRef={[Function]}
                    name="This is the input its name"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    style={
                              Object {
                                        "height": "",
                                      }
                    }
                    value="testing123
          testing
          testing
          123"
          />
          <div>
                    <ErrorMessage__ErrorMessage
                              showError={false}
                    >
                              Error message. 
                    </ErrorMessage__ErrorMessage>
                    <HelperText__HelperText>
                              <span>
                                        This is a helper text
                                         
                                        <FormattedMessage
                                                  defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                                                  id="portfolio.components.FormInput.helperText.range"
                                                  values={
                                                            Object {
                                                                      "count": 30,
                                                                      "maxLength": 300,
                                                                      "minLength": 1,
                                                                    }
                                                  }
                                        />
                              </span>
                    </HelperText__HelperText>
          </div>
</InputGroup__InputGroup>,
        "_debugID": 28,
        "_renderedOutput": <InputGroup__InputGroup>
          <Label__Label
                    htmlFor="name"
                    onClick={[Function]}
          >
                    <LabelContent__LabelContent
                              hasFocus={true}
                    >
                              This is the label text
                              <Placeholder__Placeholder
                                        hasFocus={true}
                              >
                                        <i>
                                                  This is the placeholder text
                                        </i>
                              </Placeholder__Placeholder>
                    </LabelContent__LabelContent>
          </Label__Label>
          <styled.textarea
                    innerRef={[Function]}
                    name="This is the input its name"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    style={
                              Object {
                                        "height": "",
                                      }
                    }
                    value="testing123
          testing
          testing
          123"
          />
          <div>
                    <ErrorMessage__ErrorMessage
                              showError={false}
                    >
                              Error message. 
                    </ErrorMessage__ErrorMessage>
                    <HelperText__HelperText>
                              <span>
                                        This is a helper text
                                         
                                        <FormattedMessage
                                                  defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                                                  id="portfolio.components.FormInput.helperText.range"
                                                  values={
                                                            Object {
                                                                      "count": 30,
                                                                      "maxLength": 300,
                                                                      "minLength": 1,
                                                                    }
                                                  }
                                        />
                              </span>
                    </HelperText__HelperText>
          </div>
</InputGroup__InputGroup>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <FormInput
    helperText="This is a helper text"
    inputType="dummy"
    isTextArea={true}
    label="This is the label text"
    maxLength={300}
    minLength={1}
    name="This is the input its name"
    onChange={[Function]}
    placeholder="This is the placeholder text"
    validate={[Function]}
    value="The value"
/>,
}
`;

exports[`FormInput when a user populates the textarea should update the helper text, when available 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <InputGroup__InputGroup>
    <Label__Label
        htmlFor="name"
        onClick={[Function]}
    >
        <LabelContent__LabelContent
            hasFocus={true}
        >
            This is the label text
            <Placeholder__Placeholder
                hasFocus={true}
            >
                <i>
                    This is the placeholder text
                </i>
            </Placeholder__Placeholder>
        </LabelContent__LabelContent>
    </Label__Label>
    <styled.textarea
        innerRef={[Function]}
        name="This is the input its name"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        style={
            Object {
                "height": "",
              }
        }
        value="testing123
    testing
    testing
    123"
    />
    <div>
        <ErrorMessage__ErrorMessage
            showError={false}
        >
            false 
        </ErrorMessage__ErrorMessage>
        <HelperText__HelperText>
            <span>
                This is a helper text
                 
                <FormattedMessage
                    defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                    id="portfolio.components.FormInput.helperText.range"
                    values={
                        Object {
                            "count": 30,
                            "maxLength": 300,
                            "minLength": 1,
                          }
                    }
                />
            </span>
        </HelperText__HelperText>
    </div>
</InputGroup__InputGroup>,
  "nodes": Array [
    <InputGroup__InputGroup>
      <Label__Label
            htmlFor="name"
            onClick={[Function]}
      >
            <LabelContent__LabelContent
                  hasFocus={true}
            >
                  This is the label text
                  <Placeholder__Placeholder
                        hasFocus={true}
                  >
                        <i>
                              This is the placeholder text
                        </i>
                  </Placeholder__Placeholder>
            </LabelContent__LabelContent>
      </Label__Label>
      <styled.textarea
            innerRef={[Function]}
            name="This is the input its name"
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            style={
                  Object {
                        "height": "",
                      }
            }
            value="testing123
      testing
      testing
      123"
      />
      <div>
            <ErrorMessage__ErrorMessage
                  showError={false}
            >
                  false 
            </ErrorMessage__ErrorMessage>
            <HelperText__HelperText>
                  <span>
                        This is a helper text
                         
                        <FormattedMessage
                              defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                              id="portfolio.components.FormInput.helperText.range"
                              values={
                                    Object {
                                          "count": 30,
                                          "maxLength": 300,
                                          "minLength": 1,
                                        }
                              }
                        />
                  </span>
            </HelperText__HelperText>
      </div>
</InputGroup__InputGroup>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <FormInput
        helperText="This is a helper text"
        inputType="dummy"
        isTextArea={true}
        label="This is the label text"
        maxLength={300}
        minLength={1}
        name="This is the input its name"
        onChange={[Function]}
        placeholder="This is the placeholder text"
        validate={[Function]}
        value="The value"
/>,
      "_debugID": 25,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": FormInput {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "onBlur": [Function],
        "onChange": [Function],
        "onFocus": [Function],
        "props": Object {
          "helperText": "This is a helper text",
          "inputType": "dummy",
          "isTextArea": true,
          "label": "This is the label text",
          "maxLength": 300,
          "minLength": 1,
          "name": "This is the input its name",
          "onChange": [Function],
          "placeholder": "This is the placeholder text",
          "validate": [Function],
          "value": "The value",
        },
        "refs": Object {},
        "setFocus": [Function],
        "state": Object {
          "_hasFocus": true,
          "_height": "",
          "error": false,
          "value": "testing123
testing
testing
123",
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 13,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <InputGroup__InputGroup>
          <Label__Label
                    htmlFor="name"
                    onClick={[Function]}
          >
                    <LabelContent__LabelContent
                              hasFocus={true}
                    >
                              This is the label text
                              <Placeholder__Placeholder
                                        hasFocus={true}
                              >
                                        <i>
                                                  This is the placeholder text
                                        </i>
                              </Placeholder__Placeholder>
                    </LabelContent__LabelContent>
          </Label__Label>
          <styled.textarea
                    innerRef={[Function]}
                    name="This is the input its name"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    style={
                              Object {
                                        "height": "",
                                      }
                    }
                    value="testing123
          testing
          testing
          123"
          />
          <div>
                    <ErrorMessage__ErrorMessage
                              showError={false}
                    >
                              false 
                    </ErrorMessage__ErrorMessage>
                    <HelperText__HelperText>
                              <span>
                                        This is a helper text
                                         
                                        <FormattedMessage
                                                  defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                                                  id="portfolio.components.FormInput.helperText.range"
                                                  values={
                                                            Object {
                                                                      "count": 30,
                                                                      "maxLength": 300,
                                                                      "minLength": 1,
                                                                    }
                                                  }
                                        />
                              </span>
                    </HelperText__HelperText>
          </div>
</InputGroup__InputGroup>,
        "_debugID": 26,
        "_renderedOutput": <InputGroup__InputGroup>
          <Label__Label
                    htmlFor="name"
                    onClick={[Function]}
          >
                    <LabelContent__LabelContent
                              hasFocus={true}
                    >
                              This is the label text
                              <Placeholder__Placeholder
                                        hasFocus={true}
                              >
                                        <i>
                                                  This is the placeholder text
                                        </i>
                              </Placeholder__Placeholder>
                    </LabelContent__LabelContent>
          </Label__Label>
          <styled.textarea
                    innerRef={[Function]}
                    name="This is the input its name"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    style={
                              Object {
                                        "height": "",
                                      }
                    }
                    value="testing123
          testing
          testing
          123"
          />
          <div>
                    <ErrorMessage__ErrorMessage
                              showError={false}
                    >
                              false 
                    </ErrorMessage__ErrorMessage>
                    <HelperText__HelperText>
                              <span>
                                        This is a helper text
                                         
                                        <FormattedMessage
                                                  defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                                                  id="portfolio.components.FormInput.helperText.range"
                                                  values={
                                                            Object {
                                                                      "count": 30,
                                                                      "maxLength": 300,
                                                                      "minLength": 1,
                                                                    }
                                                  }
                                        />
                              </span>
                    </HelperText__HelperText>
          </div>
</InputGroup__InputGroup>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <FormInput
    helperText="This is a helper text"
    inputType="dummy"
    isTextArea={true}
    label="This is the label text"
    maxLength={300}
    minLength={1}
    name="This is the input its name"
    onChange={[Function]}
    placeholder="This is the placeholder text"
    validate={[Function]}
    value="The value"
/>,
}
`;
