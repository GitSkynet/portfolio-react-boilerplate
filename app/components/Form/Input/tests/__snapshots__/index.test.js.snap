// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Input /> should act when receiving focus 1`] = `
<InputGroup__InputGroup>
  <Label__Label
    htmlFor="name"
    onClick={[Function]}
  >
    <LabelContent__LabelContent
      hasFocus={true}
    >
      This is the label text
      <Placeholder__Placeholder
        hasFocus={true}
      >
        <i>
          This is the placeholder text
        </i>
      </Placeholder__Placeholder>
    </LabelContent__LabelContent>
  </Label__Label>
  <StyledInput__StyledInput
    innerRef={[Function]}
    name="This is the input its name"
    onBlur={[Function]}
    onChange={[Function]}
    onFocus={[Function]}
    type="dummy"
    value="The value"
  />
  <SubText__SubText>
    <ErrorMessage__ErrorMessage
      showError={false}
    >
      false 
    </ErrorMessage__ErrorMessage>
    <span>
      <span>
        This is a helper text
         
        <FormattedMessage
          defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
          id="portfolio.components.Form.helperText.range"
          values={
            Object {
              "count": 9,
              "maxLength": 15,
              "minLength": 1,
            }
          }
        />
      </span>
    </span>
  </SubText__SubText>
</InputGroup__InputGroup>
`;

exports[`<Input /> should receive all properties 1`] = `
<InputGroup__InputGroup>
  <Label__Label
    htmlFor="name"
    onClick={[Function]}
  >
    <LabelContent__LabelContent
      hasFocus={true}
    >
      This is the label text
      <Placeholder__Placeholder
        hasFocus={true}
      >
        <i>
          This is the placeholder text
        </i>
      </Placeholder__Placeholder>
    </LabelContent__LabelContent>
  </Label__Label>
  <StyledInput__StyledInput
    innerRef={[Function]}
    name="This is the input its name"
    onBlur={[Function]}
    onChange={[Function]}
    onFocus={[Function]}
    type="dummy"
    value="The value"
  />
  <SubText__SubText>
    <ErrorMessage__ErrorMessage
      showError={false}
    >
      false 
    </ErrorMessage__ErrorMessage>
    <span>
      <FormattedMessage
        defaultMessage="Thanks!"
        id="portfolio.components.Form.helperText.valid"
        values={Object {}}
      />
    </span>
  </SubText__SubText>
</InputGroup__InputGroup>
`;

exports[`<Input /> should render with only the required properties and match the snapshot 1`] = `
<InputGroup__InputGroup>
  <Label__Label
    htmlFor="name"
    onClick={[Function]}
  >
    <LabelContent__LabelContent
      hasFocus={false}
    >
      This is the label text
      <Placeholder__Placeholder
        hasFocus={false}
      >
        <i />
      </Placeholder__Placeholder>
    </LabelContent__LabelContent>
  </Label__Label>
  <StyledInput__StyledInput
    innerRef={[Function]}
    name="This is the input its name"
    onBlur={[Function]}
    onChange={[Function]}
    onFocus={[Function]}
    type="text"
  />
  <SubText__SubText>
    <ErrorMessage__ErrorMessage
      showError={false}
    >
      false 
    </ErrorMessage__ErrorMessage>
    <span />
  </SubText__SubText>
</InputGroup__InputGroup>
`;

exports[`<Input /> when a user populates the input field should not show any errors as long as the field has the focus 1`] = `
<InputGroup__InputGroup>
  <Label__Label
    htmlFor="name"
    onClick={[Function]}
  >
    <LabelContent__LabelContent
      hasFocus={true}
    >
      This is the label text
      <Placeholder__Placeholder
        hasFocus={true}
      >
        <i>
          This is the placeholder text
        </i>
      </Placeholder__Placeholder>
    </LabelContent__LabelContent>
  </Label__Label>
  <StyledInput__StyledInput
    innerRef={[Function]}
    name="This is the input its name"
    onBlur={[Function]}
    onChange={[Function]}
    onFocus={[Function]}
    type="dummy"
    value="testing123"
  />
  <SubText__SubText>
    <ErrorMessage__ErrorMessage
      showError={false}
    >
      Error message. 
    </ErrorMessage__ErrorMessage>
    <span>
      <span>
        This is a helper text
         
        <FormattedMessage
          defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
          id="portfolio.components.Form.helperText.range"
          values={
            Object {
              "count": 10,
              "maxLength": 15,
              "minLength": 1,
            }
          }
        />
      </span>
    </span>
  </SubText__SubText>
</InputGroup__InputGroup>
`;

exports[`<Input /> when a user populates the input field should update the helper text, when available 1`] = `
<InputGroup__InputGroup>
  <Label__Label
    htmlFor="name"
    onClick={[Function]}
  >
    <LabelContent__LabelContent
      hasFocus={true}
    >
      This is the label text
      <Placeholder__Placeholder
        hasFocus={true}
      >
        <i>
          This is the placeholder text
        </i>
      </Placeholder__Placeholder>
    </LabelContent__LabelContent>
  </Label__Label>
  <StyledInput__StyledInput
    innerRef={[Function]}
    name="This is the input its name"
    onBlur={[Function]}
    onChange={[Function]}
    onFocus={[Function]}
    type="dummy"
    value="testing123"
  />
  <SubText__SubText>
    <ErrorMessage__ErrorMessage
      showError={false}
    >
      Error, Error, Error 
    </ErrorMessage__ErrorMessage>
    <span>
      <span>
        This is a helper text
         
        <FormattedMessage
          defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
          id="portfolio.components.Form.helperText.range"
          values={
            Object {
              "count": 10,
              "maxLength": 15,
              "minLength": 1,
            }
          }
        />
      </span>
    </span>
  </SubText__SubText>
</InputGroup__InputGroup>
`;

exports[`<Input /> when moving away should show an error message when the input is not correct 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Input
    changeHandler={[Function]}
    helperText="This is a helper text"
    inputType="dummy"
    label="This is the label text"
    maxLength={15}
    minLength={1}
    name="This is the input its name"
    placeholder="This is the placeholder text"
    validate={[Function]}
    value="The value"
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <Label__Label
          htmlFor="name"
          onClick={[Function]}
>
          <LabelContent__LabelContent
                    hasFocus={false}
          >
                    This is the label text
                    <Placeholder__Placeholder
                              hasFocus={false}
                    >
                              <i>
                                        This is the placeholder text
                              </i>
                    </Placeholder__Placeholder>
          </LabelContent__LabelContent>
</Label__Label>,
        <StyledInput__StyledInput
          innerRef={[Function]}
          name="This is the input its name"
          onBlur={[Function]}
          onChange={[Function]}
          onFocus={[Function]}
          type="dummy"
          value=""
/>,
        <SubText__SubText>
          <ErrorMessage__ErrorMessage
                    showError={true}
          >
                    Error, Error, Error 
          </ErrorMessage__ErrorMessage>
          <span>
                    <span>
                              This is a helper text
                               
                              <FormattedMessage
                                        defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                                        id="portfolio.components.Form.helperText.range"
                                        values={
                                                  Object {
                                                            "count": 0,
                                                            "maxLength": 15,
                                                            "minLength": 1,
                                                          }
                                        }
                              />
                    </span>
          </span>
</SubText__SubText>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <LabelContent__LabelContent
            hasFocus={false}
>
            This is the label text
            <Placeholder__Placeholder
                        hasFocus={false}
            >
                        <i>
                                    This is the placeholder text
                        </i>
            </Placeholder__Placeholder>
</LabelContent__LabelContent>,
          "htmlFor": "name",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              "This is the label text",
              <Placeholder__Placeholder
                hasFocus={false}
>
                <i>
                                This is the placeholder text
                </i>
</Placeholder__Placeholder>,
            ],
            "hasFocus": false,
          },
          "ref": null,
          "rendered": Array [
            "This is the label text",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <i>
                  This is the placeholder text
</i>,
                "hasFocus": false,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "This is the placeholder text",
                },
                "ref": null,
                "rendered": "This is the placeholder text",
                "type": "i",
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "innerRef": [Function],
          "name": "This is the input its name",
          "onBlur": [Function],
          "onChange": [Function],
          "onFocus": [Function],
          "type": "dummy",
          "value": "",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <ErrorMessage__ErrorMessage
              showError={true}
>
              Error, Error, Error 
</ErrorMessage__ErrorMessage>,
            <span>
              <span>
                            This is a helper text
                             
                            <FormattedMessage
                                          defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                                          id="portfolio.components.Form.helperText.range"
                                          values={
                                                        Object {
                                                                      "count": 0,
                                                                      "maxLength": 15,
                                                                      "minLength": 1,
                                                                    }
                                          }
                            />
              </span>
</span>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Error, Error, Error ",
              "showError": true,
            },
            "ref": null,
            "rendered": "Error, Error, Error ",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <span>
                This is a helper text
                 
                <FormattedMessage
                                defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                                id="portfolio.components.Form.helperText.range"
                                values={
                                                Object {
                                                                "count": 0,
                                                                "maxLength": 15,
                                                                "minLength": 1,
                                                              }
                                }
                />
</span>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "This is a helper text",
                  " ",
                  <FormattedMessage
                    defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                    id="portfolio.components.Form.helperText.range"
                    values={
                                        Object {
                                                            "count": 0,
                                                            "maxLength": 15,
                                                            "minLength": 1,
                                                          }
                    }
/>,
                ],
              },
              "ref": null,
              "rendered": Array [
                "This is a helper text",
                " ",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultMessage": "Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}",
                    "id": "portfolio.components.Form.helperText.range",
                    "values": Object {
                      "count": 0,
                      "maxLength": 15,
                      "minLength": 1,
                    },
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "span",
            },
            "type": "span",
          },
        ],
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Label__Label
            htmlFor="name"
            onClick={[Function]}
>
            <LabelContent__LabelContent
                        hasFocus={false}
            >
                        This is the label text
                        <Placeholder__Placeholder
                                    hasFocus={false}
                        >
                                    <i>
                                                This is the placeholder text
                                    </i>
                        </Placeholder__Placeholder>
            </LabelContent__LabelContent>
</Label__Label>,
          <StyledInput__StyledInput
            innerRef={[Function]}
            name="This is the input its name"
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            type="dummy"
            value=""
/>,
          <SubText__SubText>
            <ErrorMessage__ErrorMessage
                        showError={true}
            >
                        Error, Error, Error 
            </ErrorMessage__ErrorMessage>
            <span>
                        <span>
                                    This is a helper text
                                     
                                    <FormattedMessage
                                                defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                                                id="portfolio.components.Form.helperText.range"
                                                values={
                                                            Object {
                                                                        "count": 0,
                                                                        "maxLength": 15,
                                                                        "minLength": 1,
                                                                      }
                                                }
                                    />
                        </span>
            </span>
</SubText__SubText>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <LabelContent__LabelContent
              hasFocus={false}
>
              This is the label text
              <Placeholder__Placeholder
                            hasFocus={false}
              >
                            <i>
                                          This is the placeholder text
                            </i>
              </Placeholder__Placeholder>
</LabelContent__LabelContent>,
            "htmlFor": "name",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                "This is the label text",
                <Placeholder__Placeholder
                  hasFocus={false}
>
                  <i>
                                    This is the placeholder text
                  </i>
</Placeholder__Placeholder>,
              ],
              "hasFocus": false,
            },
            "ref": null,
            "rendered": Array [
              "This is the label text",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <i>
                    This is the placeholder text
</i>,
                  "hasFocus": false,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "This is the placeholder text",
                  },
                  "ref": null,
                  "rendered": "This is the placeholder text",
                  "type": "i",
                },
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "innerRef": [Function],
            "name": "This is the input its name",
            "onBlur": [Function],
            "onChange": [Function],
            "onFocus": [Function],
            "type": "dummy",
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <ErrorMessage__ErrorMessage
                showError={true}
>
                Error, Error, Error 
</ErrorMessage__ErrorMessage>,
              <span>
                <span>
                                This is a helper text
                                 
                                <FormattedMessage
                                                defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                                                id="portfolio.components.Form.helperText.range"
                                                values={
                                                                Object {
                                                                                "count": 0,
                                                                                "maxLength": 15,
                                                                                "minLength": 1,
                                                                              }
                                                }
                                />
                </span>
</span>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Error, Error, Error ",
                "showError": true,
              },
              "ref": null,
              "rendered": "Error, Error, Error ",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <span>
                  This is a helper text
                   
                  <FormattedMessage
                                    defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                                    id="portfolio.components.Form.helperText.range"
                                    values={
                                                      Object {
                                                                        "count": 0,
                                                                        "maxLength": 15,
                                                                        "minLength": 1,
                                                                      }
                                    }
                  />
</span>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "This is a helper text",
                    " ",
                    <FormattedMessage
                      defaultMessage="Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}"
                      id="portfolio.components.Form.helperText.range"
                      values={
                                            Object {
                                                                  "count": 0,
                                                                  "maxLength": 15,
                                                                  "minLength": 1,
                                                                }
                      }
/>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  "This is a helper text",
                  " ",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Should be between {minLength, number} and {maxLength, number} characters. Is now: {count, number}",
                      "id": "portfolio.components.Form.helperText.range",
                      "values": Object {
                        "count": 0,
                        "maxLength": 15,
                        "minLength": 1,
                      },
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": "span",
              },
              "type": "span",
            },
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
