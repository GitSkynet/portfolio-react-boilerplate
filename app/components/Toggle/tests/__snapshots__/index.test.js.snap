// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Toggle /> should contain default text 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <Toggle
    messages={
        Object {
            "en": Object {
              "defaultMessage": "someContent",
              "id": "boilerplate.containers.LocaleToggle.en",
            },
            "nl": Object {
              "defaultMessage": "someOtherContent",
              "id": "boilerplate.containers.LocaleToggle.en",
            },
          }
    }
    values={
        Array [
            "en",
            "nl",
          ]
    }
/>,
  "nodes": Array [
    <Toggle
      messages={
            Object {
                  "en": Object {
                    "defaultMessage": "someContent",
                    "id": "boilerplate.containers.LocaleToggle.en",
                  },
                  "nl": Object {
                    "defaultMessage": "someOtherContent",
                    "id": "boilerplate.containers.LocaleToggle.en",
                  },
                }
      }
      values={
            Array [
                  "en",
                  "nl",
                ]
      }
/>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <IntlProvider
        locale="en"
>
        <Toggle
                messages={
                        Object {
                                "en": Object {
                                  "defaultMessage": "someContent",
                                  "id": "boilerplate.containers.LocaleToggle.en",
                                },
                                "nl": Object {
                                  "defaultMessage": "someOtherContent",
                                  "id": "boilerplate.containers.LocaleToggle.en",
                                },
                              }
                }
                values={
                        Array [
                                "en",
                                "nl",
                              ]
                }
        />
</IntlProvider>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": IntlProvider {
        "_reactInternalInstance": [Circular],
        "context": Object {
          "intl": undefined,
        },
        "props": Object {
          "children": <Toggle
            messages={
                        Object {
                                    "en": Object {
                                      "defaultMessage": "someContent",
                                      "id": "boilerplate.containers.LocaleToggle.en",
                                    },
                                    "nl": Object {
                                      "defaultMessage": "someOtherContent",
                                      "id": "boilerplate.containers.LocaleToggle.en",
                                    },
                                  }
            }
            values={
                        Array [
                                    "en",
                                    "nl",
                                  ]
            }
/>,
          "locale": "en",
        },
        "refs": Object {},
        "state": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
          "now": [Function],
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <Toggle
          messages={
                    Object {
                              "en": Object {
                                "defaultMessage": "someContent",
                                "id": "boilerplate.containers.LocaleToggle.en",
                              },
                              "nl": Object {
                                "defaultMessage": "someOtherContent",
                                "id": "boilerplate.containers.LocaleToggle.en",
                              },
                            }
          }
          values={
                    Array [
                              "en",
                              "nl",
                            ]
          }
/>,
        "_debugID": 2,
        "_renderedOutput": <Toggle
          messages={
                    Object {
                              "en": Object {
                                "defaultMessage": "someContent",
                                "id": "boilerplate.containers.LocaleToggle.en",
                              },
                              "nl": Object {
                                "defaultMessage": "someOtherContent",
                                "id": "boilerplate.containers.LocaleToggle.en",
                              },
                            }
          }
          values={
                    Array [
                              "en",
                              "nl",
                            ]
          }
/>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <IntlProvider
    locale="en"
>
    <Toggle
        messages={
            Object {
                "en": Object {
                  "defaultMessage": "someContent",
                  "id": "boilerplate.containers.LocaleToggle.en",
                },
                "nl": Object {
                  "defaultMessage": "someOtherContent",
                  "id": "boilerplate.containers.LocaleToggle.en",
                },
              }
        }
        values={
            Array [
                "en",
                "nl",
              ]
        }
    />
</IntlProvider>,
}
`;
